"""
Stock market prediction using Markov chains.

For each function, replace the return statement with your code.  Add
whatever helper functions you deem necessary.

Originally run on py3.codeskulptor.org
"""

import comp140_module3 as stocks
import random
from collections import defaultdict

### Model

def markov_inner():
    """
    Create a default dictionary to put in 
    """
    return defaultdict(int)

def make_probs(dictionary):
    """
    Turns a dicitionary of integers and turns them into probabilities
    
    Inputs: 
    dictionary - a dictionary with integers as values
    
    Outputs:
    A dictionary with the probability of the number occuring as the values
    """
    tot_values = 0
    for numbers in dictionary.values():
        tot_values += numbers
    for keys, value in dictionary.items():
        dictionary[keys] = value/tot_values
    return dictionary
    
def markov_chain(data, order):
    """
    Create a Markov chain with the given order from the given data.

    inputs:
        - data: a list of ints or floats representing previously collected data
        - order: an integer repesenting the desired order of the markov chain

    returns: a dictionary that represents the Markov chain
    """
    markov = defaultdict(markov_inner)

    
    for num in range(0, len(data)):
        if (num + order) < len(data):
            #Turns the data into a markov chain based on the order
            new_key = data[num : (num + order)]
            markov[tuple(new_key)][data[num + order]] += 1
    for keys in markov.keys():
        #Turns the values in the dictionaries into probabilities
        make_probs(markov[keys])
    return markov


### Predict

def weighted_random(prob):
    """
    Takes a set of probabilites and randomly chooses a number based on the 
    probabilites
    
    Inputs:
    prob - a dictionary with probabilities as keys
    
    Outputs:
    A number based on the weighted probabilities
    """
    rnum = random.random()
    holder = 0
    num = 0
    
    for key, value in prob.items():
        holder += value
        if holder >= rnum:
            num = key
            break
    return num


def predict(model, last, num):
    """
    Predict the next num values given the model and the last values.

    inputs:
        - model: a dictionary representing a Markov chain
        - last: a list (with length of the order of the Markov chain)
                representing the previous states
        - num: an integer representing the number of desired future states

    returns: a list of integers that are the next num states
    """
    next_days = []
    current_state = last.copy()
    
    while len(next_days) != num:
        if tuple(current_state) in model.keys():
            #makes a choice based on probabilities from the markov chain
            predicted_state = weighted_random(model[tuple(current_state)])
            next_days.append(predicted_state)
            current_state.append(predicted_state)
            current_state.pop(0)
        else:
            #randomly chooses a bin with equal choice of being chosen
            predicted_state = random.randrange(0, 4)
            next_days.append(predicted_state)
            current_state.append(predicted_state)
            current_state.pop(0)
    
    return next_days



### Error

def mse(result, expected):
    """
    Calculate the mean squared error between two data sets.

    The length of the inputs, result and expected, must be the same.

    inputs:
        - result: a list of integers or floats representing the actual output
        - expected: a list of integers or floats representing the predicted output

    returns: a float that is the mean squared error between the two data sets
    """
    differences = 0
    
    for num1, num2 in zip(result, expected):
        #Combines the two lists and subtracts then square each element
        differences += ((num1 - num2) ** 2)
    
    return differences / len(result)


### Experiment

def run_experiment(train, order, test, future, actual, trials):
    """
    Run an experiment to predict the future of the test
    data given the training data.

    inputs:
        - train: a list of integers representing past stock price data
        - order: an integer representing the order of the markov chain
                 that will be used
        - test: a list of integers of length "order" representing past
                stock price data (different time period than "train")
        - future: an integer representing the number of future days to
                  predict
        - actual: a list representing the actual results for the next
                  "future" days
        - trials: an integer representing the number of trials to run

    returns: a float that is the mean squared error over the number of trials
    """
    model = markov_chain(train, order)
    num = 0
    average = 0
    
    while num < trials:
        #Runs through prediction however many times the user wants
        estimation = predict(model, test, future)
        average += mse(estimation, actual)
        num += 1
    
    return average / trials


### Application

def run():
    """
    Run application.

    You do not need to modify any code in this function.  You should
    feel free to look it over and understand it, though.
    """
    # Get the supported stock symbols
    symbols = stocks.get_supported_symbols()

    # Get stock data and process it

    # Training data
    changes = {}
    bins = {}
    for symbol in symbols:
        prices = stocks.get_historical_prices(symbol)
        changes[symbol] = stocks.compute_daily_change(prices)
        bins[symbol] = stocks.bin_daily_changes(changes[symbol])

    # Test data
    testchanges = {}
    testbins = {}
    for symbol in symbols:
        testprices = stocks.get_test_prices(symbol)
        testchanges[symbol] = stocks.compute_daily_change(testprices)
        testbins[symbol] = stocks.bin_daily_changes(testchanges[symbol])

    # Display data
    #   Comment these 2 lines out if you don't want to see the plots
    stocks.plot_daily_change(changes)
    stocks.plot_bin_histogram(bins)

    # Run experiments
    orders = [1, 3, 5, 7, 9]
    ntrials = 500
    days = 5

    for symbol in symbols:
        print(symbol)
        print("====")
        print("Actual:", testbins[symbol][-days:])
        for order in orders:
            error = run_experiment(bins[symbol], order,
                                   testbins[symbol][-order-days:-days], days,
                                   testbins[symbol][-days:], ntrials)
            print("Order", order, ":", error)
        print()

# You might want to comment out the call to run while you are
# developing your code.  Uncomment it when you are ready to run your
# code on the provided data.

run()
